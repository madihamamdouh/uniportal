import {  AuthProvider    } from "@refinedev/core";
import { API_URL, dataProvider } from "./data";


//for demo only
export const authCredentials = {
    email: "madiham@enoc.com",
    password: "123!!",
};

export const authProvider: AuthProvider= {
    login: async({email}) => {
        try{
            //call the login mutation
            //dataProvider.custom is used to make a custom requet to graphql api
            //this will call dataprovider from fetchwrapper file
            const {data} = await dataProvider.custom({
                url: API_URL,
                method: "post",
                headers: {},
                meta:{
                    variables:{email},
                    //pass the email to see if user exists and if so , return access token
                    rawQuery: `
                    mutation Login($email: String!) {
                        login(loginInput: {email: $email}) {
                            accessToken
                        }
                    
                    }`,
                },

            })
            //save the accessToken to local storage
            localStorage.setItem("access_token", data.login.accessToken);

            return {
                success: true,
                redirectTo:"/",
            }
        }catch(err){
            const error = err as Error;

            return{
                success: false,
                error:{
                    message: "message" in error ? error.message: "Login Faild",
                    name: "name" in error? error.name: "Invalid email or password",

                },
            };


        }
    },
    //remove access token from local S
    logout: async()=> {
localStorage.removeItem("access_token");

return{
    success: true,
    redirectTo:"/login"
};
    },
    //additional error handling
    //this will check to see if the error is error handling, if true will set logout true   
    onError: async(error)=>{
        if(error.statusCode === "UNAUTHENTICATED"){
            return{
                logout: true,
                ...error,
            };
        }
        return{error};

    },
    //get identity of the user, to check if user is authintecated or not
    //iff so redirect to homepage, if not redirect to login
    check: async()=>{
        try{
            await dataProvider.custom({
                url: API_URL,
                method: "post",
                headers: {},
                meta:{
                    rawQuery:`
                    query Me{
                        me{

                            name
                        }
                    }
                    `,
                }
            });
            
            return{
                authenticated: true,
                redirectTo: "/",
    
            };
        }
        catch(err){
            return{
                authenticated:false,
                redirectTo: "/login",
            };

        }
    },

    //get user info, call graphQl api to get use info such as name, email ...
    //using me:any as graphQl dosent have type of me query yet
    // will add some queries and mutation later and change this to User which will be generated by codegen.
    getIdentity: async()=>{
        const accessToken = localStorage.getItem("access_token");
        try{
            const {data} = await dataProvider.custom<{me: any}>({
                url: API_URL,
                method: "post",
                headers: accessToken?
                {Authorization: `Bearer ${accessToken}`}: {},
                meta: {
                    rawQuery:`
                    query Me{
                        me{
                            id
                            name
                            email
                            phone
                            jobTitle
                            timezone
                            avatarUrl
                        }
                    }
                    `,

                }

            });
            return data.me;
        }catch(err){
            return undefined;
        }

    }
}